<#
.SYNOPSIS
Namecheap API Powershell Module

.DESCRIPTION
Powershell Module for interacting with Namecheap API

Author: Mark Brightenfield
Date: 4/22/2025

.NOTES
The API User and Password are stored as an encrypted string in a JSON file named PSNamecheap.config.${env:ComputerName}.${env:UserName}.json
The strings can only be decrypted by the logged in user and computer they were generated by.

Run the following powershell command to generate new encrypted strings for a specific user

Read-Host -AsSecureString | ConvertFrom-SecureString

Example Config:
File: PSNamecheap.config.mark-desktop.mbrightenfield.json
File Content:
{
    "ApiURL": "https://api.sandbox.namecheap.com/xml.response",
    "Global" : {
        "ApiUser": "<Encrypted String>",
        "UserName": "<Encrypted String>",
        "ApiKey": "<Encrypted String>",
        "ClientIp": "<IPv4 Address>"
    }
}

Alternatively, call api.config.build to generate a config file automatically.

Namecheap API Requirements:
Your account should meet one of the following requirements:
- have at least 20 domains under your account;
- have at least $50 on your account balance;
- have at least $50 spent within the last 2 years.

Namecheap API Limits:
50/min, 700/hour, and 8000/day across the whole key.

.LINK
https://www.namecheap.com/support/api/intro/
#>

$script:default_config_path = "$PSScriptRoot\PSNamecheap.config.${env:ComputerName}.${env:UserName}.json"
$script:config = $null

# Get public and private function definition files
$public = @(Get-ChildItem -Path "$PSScriptRoot\Public\*.ps1" -Exclude "*.Tests.*" -ErrorAction SilentlyContinue)
$private = @(Get-ChildItem -Path "$PSScriptRoot\Private\*.ps1" -Exclude "*.Tests.*" -ErrorAction SilentlyContinue)

# Importing all functions
foreach ($import in @($public + $private)) {
    try {
        Write-Verbose "Importing $($import.FullName)..."
        . $import.FullName
    }
    catch {
        Write-Error "Failed to import function $($import.FullName): $_"
    }
}

#Let's try and read the config when the module is loaded.
api.config.load

# Export public functions
Export-ModuleMember -Function $public.BaseName